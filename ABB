#ifndef ABB_H_INCLUDED
#define ABB_H_INCLUDED
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define PAUSA_PRESTADORES 5
typedef struct {
    int DNI;
    char nombreyapellido[80];
    char servicios[120];
    char domicilio[80];
    char correo[50];
    char telefono[30];
} PrestadorABB;

typedef struct nodo {
    PrestadorABB datos;
    struct nodo *izq;
    struct nodo *der;
} Nodo;

typedef struct {
    Nodo *raiz;
    Nodo *cur;
    Nodo *padre;
} Arbol;

void init_ABB(Arbol *a) {
    a->raiz = NULL;
    a->cur = NULL;
    a->padre = NULL;
}

// Variables globales para el costo de las operaciones
int cantActPtrosAlta = 0;   // Acumula cuántas actualizaciones de punteros se hacen en cada alta.
int MaxAlta = 0;            // Guarda el valor más grande en actualizaciones de punteros en una alta.
int cantAltas = 0;          // Cuenta la cantidad de altas exitosas.

int cantActPtrosBaja = 0;   // Acumula cuántas actualizaciones de punteros se hacen en cada baja.
int MaxBaja = 0;            // Guarda el valor más grande en actualizaciones de punteros en una baja.
int cantBajas = 0;          // Cuenta la cantidad de bajas exitosas.

int comparacionesEvocar = 0; // Acumula la cantidad de comparaciones en evocaciones.
int cantEvocaciones = 0;     // Cuenta la cantidad de evocaciones.
int MaxComparaciones = 0;    // Guarda la máxima cantidad de comparaciones en una evocación.

void Localizar_ABB(Arbol *a, int dni, int *exito, int *comparaciones) {
    *comparaciones = 0;
    a->cur = a->raiz;
    a->padre = NULL;

    while (a->cur != NULL) {
        (*comparaciones)++;  // Costo por comparación
        if (a->cur->datos.DNI == dni) {
            *exito = 1;
            return;  // DNI encontrado
        }
        a->padre = a->cur;
        if (a->cur->datos.DNI > dni) {
            a->cur = a->cur->izq;
        } else {
            a->cur = a->cur->der;
        }
    }
    *exito = 0;  // No se encontró el DNI
}

void Alta_ABB(Arbol *a, PrestadorABB nuevoPrestador, int *exito) {
    int exitoLocalizar = 0, comparaciones = 0, actualizaciones = 0;
    Localizar_ABB(a, nuevoPrestador.DNI, &exitoLocalizar, &comparaciones);

    Nodo *nuevoNodo = (Nodo *)malloc(sizeof(Nodo));
    if (nuevoNodo == NULL) {
        *exito = 0;  // Error en la asignación de memoria
        return;
    }
    nuevoNodo->datos = nuevoPrestador;
    nuevoNodo->der = NULL;
    nuevoNodo->izq = NULL;

    if (a->raiz == NULL) {
        a->raiz = nuevoNodo;  // El árbol estaba vacío
        actualizaciones++;     // Actualización de puntero
        *exito = 1;
    } else if (exitoLocalizar) {
        *exito = 2;  // DNI duplicado
        free(nuevoNodo);  // Liberar el nodo asignado si es duplicado
    } else {
        if (nuevoPrestador.DNI < a->padre->datos.DNI) {
            a->padre->izq = nuevoNodo;
        } else {
            a->padre->der = nuevoNodo;
        }
        actualizaciones++;  // Actualización de puntero
        *exito = 1;
    }

    // Actualización de costos
    cantActPtrosAlta += actualizaciones;
    if (actualizaciones > MaxAlta) {
        MaxAlta = actualizaciones;
    }

    if (*exito == 1) {
        cantAltas++;  // Incrementa el contador de altas solo si fue exitosa
    }
}

int Baja_ABB(Arbol *a, PrestadorABB prestador) {
    int exitoLocalizar = 0, comparaciones = 0, actualizaciones = 0;

    // Localizar el nodo a eliminar
    Localizar_ABB(a, prestador.DNI, &exitoLocalizar, &comparaciones);

    if (!exitoLocalizar) {
        return 0;  // Prestador no encontrado
    }

    Nodo *nodoeliminar = a->cur;

    // Confirmar la baja comparando la tupla completa (todos los campos)
    if (nodoeliminar->datos.DNI != prestador.DNI ||
        strcmp(nodoeliminar->datos.nombreyapellido, prestador.nombreyapellido) != 0 ||
        strcmp(nodoeliminar->datos.servicios, prestador.servicios) != 0 ||
        strcmp(nodoeliminar->datos.domicilio, prestador.domicilio) != 0 ||
        strcmp(nodoeliminar->datos.correo, prestador.correo) != 0 ||
        strcmp(nodoeliminar->datos.telefono, prestador.telefono) != 0) {
        return 0;  // La tupla no coincide, no se realiza la baja
    }

    // Caso 1: Nodo hoja (sin hijos)
    if (nodoeliminar->izq == NULL && nodoeliminar->der == NULL) {
        if (a->padre == NULL) {
            a->raiz = NULL;
        } else if (a->padre->izq == nodoeliminar) {
            a->padre->izq = NULL;
        } else {
            a->padre->der = NULL;
        }
        free(nodoeliminar);
        actualizaciones++;
    }
    // Caso 2: Nodo con un hijo
    else if (nodoeliminar->izq == NULL || nodoeliminar->der == NULL) {
        Nodo *hijo = (nodoeliminar->izq != NULL) ? nodoeliminar->izq : nodoeliminar->der;
        if (a->padre == NULL) {
            a->raiz = hijo;
        } else if (a->padre->izq == nodoeliminar) {
            a->padre->izq = hijo;
        } else {
            a->padre->der = hijo;
        }
        free(nodoeliminar);
        actualizaciones++;
    }
    // Caso 3: Nodo con dos hijos
    else {
        Nodo *padreMayorMenores = nodoeliminar;
        Nodo *mayorMenor = nodoeliminar->izq;

        // Encuentra el mayor de los menores (el más grande en el subárbol izquierdo)
        while (mayorMenor->der != NULL) {
            padreMayorMenores = mayorMenor;
            mayorMenor = mayorMenor->der;
        }

        // No es necesario comparar toda la tupla, ya que solo necesitas realizar el reemplazo
        nodoeliminar->datos = mayorMenor->datos;

        // Elimina el nodo que contenía el mayor de los menores
        if (padreMayorMenores->izq == mayorMenor) {
            padreMayorMenores->izq = mayorMenor->izq;
        } else {
            padreMayorMenores->der = mayorMenor->izq;
        }

        free(mayorMenor);
        actualizaciones++;
    }

    // Actualización de costos
    cantActPtrosBaja += actualizaciones;
    if (actualizaciones > MaxBaja) {
        MaxBaja = actualizaciones;
    }

    if (exitoLocalizar) {
        cantBajas++;  // Incrementa el contador de bajas exitosas
    }

    return 1;  // Baja exitosa
}

void MostrarEstructura_ABB(Arbol *a) {
    if (a->raiz == NULL) {
        printf("El arbol esta vacio.\n");
        return;
    }

    Nodo *pila[110];  // Pila para manejar hasta 110 prestadores
    int tope = -1;
    int contador = 0;

    // Iniciar con la raíz del árbol
    pila[++tope] = a->raiz;

    // Mientras haya nodos en la pila
    while (tope != -1) {
        Nodo *actual = pila[tope--];  // Pop de la pila

        // Mostrar la información del prestador
        printf("Prestador %d:\n", contador + 1);
        printf("DNI: %d\n", actual->datos.DNI);
        printf("Nombre y Apellido: %s\n", actual->datos.nombreyapellido);
        printf("Servicios: %s\n", actual->datos.servicios);
        printf("Domicilio: %s\n", actual->datos.domicilio);
        printf("Correo: %s\n", actual->datos.correo);
        printf("Teléfono: %s\n", actual->datos.telefono);

        if (actual->izq != NULL) {
            printf("DNI del Hijo izquierdo: %d\n", actual->izq->datos.DNI);
        } else {
            printf("DNI del Hijo izquierdo: NULL\n");
        }
        if (actual->der != NULL) {
            printf("DNI del Hijo derecho: %d\n", actual->der->datos.DNI);
        } else {
            printf("DNI del Hijo derecho: NULL\n");
        }

        printf("----------------------\n");
        contador++;

        if (contador % PAUSA_PRESTADORES == 0) {
            printf("Presione Enter para continuar...\n");
            getchar();
        }

        /// Verificar límite de 110 prestadores
        if (contador >= 110) {
            break;
        }

        /// Primero empujamos el hijo derecho, luego el izquierdo para procesarlos en orden preorden
        if (actual->der != NULL) {
            pila[++tope] = actual->der;
        }
        if (actual->izq != NULL) {
            pila[++tope] = actual->izq;
        }
    }
}

void Evocar_ABB(Arbol *a, int dni, int *exito, PrestadorABB *prestadorEncontrado) {
    int exitoLocalizar = 0;
    int comparaciones = 0;

    Localizar_ABB(a, dni, &exitoLocalizar, &comparaciones);

    if (exitoLocalizar) {
        *prestadorEncontrado = a->cur->datos;
        *exito = 1;
    } else {
        *exito = 0;
    }
    cantEvocaciones++;
    comparacionesEvocar += comparaciones;
    if (comparaciones > MaxComparaciones) {
        MaxComparaciones = comparaciones;
    }
}
//Funcion para que no sea sensible a mayuscula y minuscula
int confirma_ABB(PrestadorABB prestador1, PrestadorABB prestador2) {
    int c = 1;

    if (strcasecmp(prestador1.nombreyapellido, prestador2.nombreyapellido) != 0) {
        c = 0;
    }
    if (strcasecmp(prestador1.servicios, prestador2.servicios) != 0) {
        c = 0;
    }
    if (strcasecmp(prestador1.domicilio, prestador2.domicilio) != 0) {
        c = 0;
    }
    if (strcasecmp(prestador1.correo, prestador2.correo) != 0) {
        c = 0;
    }
    if (strcasecmp(prestador1.telefono, prestador2.telefono) != 0) {
        c = 0;
    }


}


#endif // ABB_H_INCLUDED
