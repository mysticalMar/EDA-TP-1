                    scanf(" %[^\n]", LSO[pos].domicilio);
                        break;
                    case 4:
                        printf("Ingrese el nuevo correo: \n");
                        scanf(" %[^\n]", LSO[pos].correo);
                        break;
                    case 5:
                        printf("Ingrese el nuevo telefono: \n");
                        scanf(" %[^\n]", LSO[pos].telefono);
                        break;
                    case 6:
                        seguir = 0;
                        break;
                }
            } else {
                printf("Error! Ingrese una opcion valida\n.");
                system("pause");
            }

            if (seguir) {
                printf("¿Desea modificar otro campo? (1: Si, 0: No)\n");
                scanf("%d", &seguir);
            }

        } while (seguir == 1);

        *exito = 1;
        return 1;
    }
}


void MostrarEstructura(Prestador l[]) {
    system("cls");
    int i, c=0;

    if (CantElem == 0) {
        printf("La lista de prestadores está vacía.\n");
        return;
    }
    for (i = 0; i < CantElem; i++) {
        printf("--------- Listado de Prestadores ---------\n");
        printf("Prestador %d:\n", i + 1);
        printf("DNI: %d\n", l[i].DNI);
        printf("Nombre y Apellido: %s\n", l[i].nombreyapellido);
        printf("Servicios: %s\n", l[i].servicios);
        printf("Domicilio: %s\n", l[i].domicilio);
        printf("Correo: %s\n", l[i].correo);
        printf("Telefono: %s\n", l[i].telefono);
        printf("------------------------------------------\n");
        c++;
        if (c==5){
            getchar();
            c=0;
        }
    }
}

int MemorizacionPrevia(Prestador LSO[]){
    FILE *fp;
    Prestador aux;
    int exito = 0, duplicados = 0, prestadorescargados = 0, i;
    int dniduplicado;
      if ((fp = fopen("Prestadores.txt", "r")) == NULL) {
        printf("No se pudo abrir el archivo.\n");
        return 0;
    } else {
        while (prestadorescargados < MAXPRESTADORES && !feof(fp)) {

            fflush(stdin);


            fscanf(fp, "%d", &aux.DNI);
            fgetc(fp);
            fscanf(fp, "%[^\n]", aux.nombreyapellido);
            fgetc(fp);
            fscanf(fp, "%[^\n]", aux.servicios);
            fgetc(fp);
            fscanf(fp, "%[^\n]", aux.domicilio);
            fgetc(fp);
            fscanf(fp, "%[^\n]", aux.correo);
            fgetc(fp);
            fscanf(fp, "%[^\n]", aux.telefono);
            fgetc(fp);

            fflush(stdin);

    if(aux.DNI == INFINITO || aux.DNI <= 0 || aux.DNI > INFINITO){
        printf("DNI inválido encontrado: %d. Se omitirá este registro.\n", aux.DNI);
        continue;  // Saltar este registro y pasar al siguiente
    }
     for (i = 0; i < CantElem; i++) {
                if (LSO[i].DNI == aux.DNI) {
                    dniduplicado = 1;
                    duplicados++;
                    printf("DNI duplicado encontrado: %d. Se omitirá este registro.\n", aux.DNI);
                    break;
                }
            }
     if(!dniduplicado){
    Alta(LSO, aux, &exito);
}
  if(exito == 1){
    prestadorescargados ++;
  }

 }

 fclose(fp);
 return 1;

 printf("\nResumen de la carga:\n");
        printf("Cantidad de prestadores cargados: %d\n", prestadorescargados);
        if (duplicados > 0) {
            printf("Se omitieron %d prestadores debido a DNIs duplicados.\n", duplicados);
        }

}

}

void Evocar(Prestador LSO[], Prestador *Elem, int DNI, int *exito){
    int pos, exitoLocalizar=0;
    Localizar(LSO, DNI, &exitoLocalizar, &pos);

    if(exitoLocalizar){
        *Elem = LSO[pos]; //Copiamos la informacion del prestador encontrado
        *exito = 1;//Evocacion exitosa
    }else{
        *exito=0;
    }
}


int esSoloLetras(char *cadena) {// Funcion auxiliar para invocarla en el main y verificar si el Nombre y Apellido son letras y espacios
    int i;
    for (i = 0; cadena[i] != '\0'; i++) {
        if (!isalpha(cadena[i]) && cadena[i] != ' ') {
            return 0;
        }
    }
    return 1;
}
int main()
{
        int opcion, exito, DNI;
        Prestador LSO[MAXPRESTADORES + 1]; // 1 elemento mas para el mas infinito
         Prestador e, prestadorEvocado, nuevoPrestador;
        inicializarLSO(LSO);

        do {
       printf("Bienvenidos a la agenda de prestadores de servicios.\n");
       printf("----- MENU PRINCIPAL -----\n");
       printf("1. Ingreso de nuevos prestadores\n");
       printf("2. Eliminar prestadores existentes\n");
       printf("3. Modificar datos de un prestador\n");
       printf("4. Consultar la informacion completa asociada al prestador\n");
       printf("5. Cargar prestadores desde un archivo\n");
       printf("6. Mostrar todos los prestadores\n");
       printf("7. Salir\n");
       printf("---------------------------\n");
       printf("Ingrese una opcion: ");
       scanf(" %d", &opcion);
        system("cls");
        switch(opcion){
     case 1:
            if(CantElem >= MAXPRESTADORES){
            printf("Error: la lista de prestadores está llena. No se puede agregar más prestadores.\n");
            system("pause");
            break;
         }
         system("cls");

         while (1) {
             printf("Ingrese el DNI del nuevo prestador (hasta 8 digitos): \n");
             scanf("%d", &nuevoPrestador.DNI);

             // Verifica si el DNI es válido
             if (nuevoPrestador.DNI == INFINITO) {
                 printf("DNI no permitido, elija otro.\n");
             } else if (nuevoPrestador.DNI > 99999999 || nuevoPrestador.DNI < 10000000) {
                 printf("DNI invalido, debe ser un numero de 8 digitos.\n");
             } else {
                 // Verifica si el DNI ya existe
                 Localizar(LSO, nuevoPrestador.DNI, &exito, &DNI);
                 if (exito) {
                     printf("Error: el DNI ya existe en la lista.\n");
                     int decision;
                     printf("¿Desea intentar con otro DNI o salir al menu principal?\n");
                     printf("Ingrese 1 para intentar con otro DNI o 0 para salir al menu principal: ");
                     scanf("%d", &decision);
                     if (decision == 0) {
                         // Salir al menú principal
                         break;  // Salir del bucle y regresar al menú principal
                     }
                 } else {
                     break;  // El DNI es válido y no está duplicado, salir del bucle
                 }
             }
         }

         // Ingresar el resto de los datos solo si se ha decidido continuar
         if (!exito) {
             while (1) {
                 printf("Ingrese el nombre y apellido: \n");
                 scanf(" %[^\n]", nuevoPrestador.nombreyapellido);
                 if (!esSoloLetras(nuevoPrestador.nombreyapellido)) {
                     printf("Error: El nombre y apellido solo pueden contener letras y espacios.\n");
                 } else {
                     break;
                 }
             }
             printf("Ingrese los servicios del prestador: \n");
             scanf(" %[^\n]", nuevoPrestador.servicios);
             printf("Ingrese el domicilio: \n");
             scanf(" %[^\n]", nuevoPrestador.domicilio);
             printf("Ingrese el correo: \n");
             scanf(" %[^\n]", nuevoPrestador.correo);
             printf("Ingrese el teléfono: \n");
             scanf(" %[^\n]", nuevoPrestador.telefono);

             Alta(LSO, nuevoPrestador, &exito);

             if (exito == 1) {
                 printf("Prestador dado de alta con exito.\n");
             } else if (exito == 2) {
                 printf("Error: DNI duplicado, no se pudo dar de alta al prestador.\n");
             } else {
                 printf("Error: no se pudo dar de alta al prestador.\n");
             }
         }
         system("pause");
         break;
     case 2:

        if (CantElem==0){
            printf("Error: lista vacia \n");
            break;
        }
         system("cls");
        printf("Ingrese el DNI del prestador a dar de baja: \n");
        scanf(" %d", &DNI);
        Baja(LSO, DNI, &exito);
        if(exito == 1){
        printf("Prestador dado de baja con exito.\n");
        } else {
            printf("Se cancelo la baja del prestador.\n");
        }

        system("pause");
        break;
     case 3:
          if (CantElem==0){
            printf("Error: lista vacia \n");
            break;
        }
        system("cls");
        printf("Ingrese el DNI del prestador a modificar: ");
        scanf(" %d", &DNI);
        Modificar(LSO, &e, DNI, &exito);
        if(exito){
            printf("Prestador modificado con exito. \n");
        }else{
            printf("Error: No se encontro el prestador. \n");
        }
        system("pause");
        break;
     case 4:
          if (CantElem==0){
            printf("Error: lista vacia \n");
            break;
        }
        system("cls");
        printf("Ingrese el DNI del prestador a evocar: \n");
        scanf(" %d", &DNI);
        Evocar(LSO, &prestadorEvocado, DNI, &exito);
        if(exito){
            printf("Prestador encontrado:\n");
            printf("DNI: %d\n", prestadorEvocado.DNI);
            printf("Nombre y Apellido: %s\n", prestadorEvocado.nombreyapellido);
            printf("Servicios: %s\n", prestadorEvocado.servicios);
            printf("Domicilio: %s\n", prestadorEvocado.domicilio);
            printf("Correo: %s\n", prestadorEvocado.correo);
            printf("Telefono: %s\n", prestadorEvocado.telefono);
        }else{
            printf("Error: Prestador no encontrado. \n");
        }
         system("pause");
         break;
     case 5:
         system("cls");
         MemorizacionPrevia(LSO);
         system("pause");
         break;
     case 6:
          if (CantElem==0){
            printf("Error: lista vacia \n");
            break;
        }
         system("cls");
         MostrarEstructura(LSO);
         system("pause");
         break;
     case 7:
          printf("Saliendo del programa. . . \n");
          break;
     default:
        printf("Opcion invalida intente nuevamente \n");
        system("pause");
        break;

       }
    }while(opcion != 7);

}
