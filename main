#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define INFINITO 99999999
#define MAXPRESTADORES 110

typedef struct {
    int DNI;
    char nombreyapellido[80];
    char servicios[120];
    char domicilio[80];
    char correo[50];
    char telefono[30];
} Prestador;


int CantElem = 0;

void inicializarLSO(Prestador LSO[]) {
    LSO[0].DNI = INFINITO;
}

void Localizar(Prestador LSO[], Prestador Elem, int *exito, int *pos) {
    int i = 0;
    while  (LSO[i].DNI < Elem.DNI) {
        i++;
    }
    *pos = i;

    if (LSO[i].DNI == Elem.DNI) {
        *exito = 1; // Se encontró el DNI
    } else {
        *exito = 0; // No se encontró el DNI
    }
}

void Alta(Prestador LSO[], Prestador Elem, int *exito) {

    int pos, exitoLocalizar = 0;
    int i;
    Localizar(LSO, Elem, &exitoLocalizar, &pos);

    if (!exitoLocalizar) {
        if (CantElem < MAXPRESTADORES) { // Hay espacio disponible
            for(i= CantElem ; i > pos; i--) {
                LSO[i] = LSO[i - 1];
            }
            // Insertamos el elemento en la posición correcta
            LSO[pos] = Elem;
            CantElem++;
            *exito = 1;

        } else {
            *exito = 0;

        }
    }
}
void Baja(Prestador LSO[], int DNI, int *exito){
int pos, exitoLocalizar=0;
int i;

Prestador ElemBusqueda;
ElemBusqueda.DNI = DNI;
Localizar(LSO, ElemBusqueda, &exitoLocalizar, &pos);

if(exitoLocalizar){
   int confirmacion;

   printf("¿Esta seguro que quiere dar de baja al presetador con DNI %d?\n", LSO[pos].DNI);
   printf("Nombre y Apellido: %s \n", LSO[pos].nombreyapellido);
   printf("Domicilio: %s\n", LSO[pos].domicilio);
   printf("Correo: %s\n", LSO[pos].correo);
   printf("Servicios: %s\n", LSO[pos].servicios);
   printf("Telefono: %s\n", LSO[pos].telefono);
   printf("Ingrese un 1 para confirmar, o cualquier otro numero para cancelar: ");
   scanf(" %d", &confirmacion);

   if(confirmacion == 1){
    for(i=pos; i<CantElem-1; i++){
        LSO[i] = LSO[i+1];
    }
    CantElem--;//Reducimos el numero de elementos
    *exito=1; //Se dio de baja correctamente
   }else{
   printf("Error: No se encontro el prestador con el DNI %d.\n", DNI);
   *exito = 0;
   }

     }

      }
int Modificar(Prestador LSO[], Prestador *Elem, int DNI, int *exito) {
    int pos, exitoLocalizar = 0;

    Prestador ElemBusqueda;
    ElemBusqueda.DNI = DNI;
    Localizar(LSO, ElemBusqueda, &exitoLocalizar, &pos);

    if (!exitoLocalizar) {
        *exito = 0;
        return 0;
    } else {
        int decision;
        int seguir = 1;
        do {
            system("cls");
            printf("Este es el prestador encontrado:\n");
            printf("DNI: %d\n", LSO[pos].DNI);
            printf("Nombre y Apellido: %s\n", LSO[pos].nombreyapellido);
            printf("Servicios: %s\n", LSO[pos].servicios);
            printf("Domicilio: %s\n", LSO[pos].domicilio);
            printf("Correo: %s\n", LSO[pos].correo);
            printf("Telefono: %s\n", LSO[pos].telefono);

            printf("\nIndique que campo desea modificar:\n");
            printf("<1> Nombre y Apellido\n<2> Servicios\n<3> Domicilio\n");
            printf("<4> Correo\n<5> Telefono\n<6> Salir de modificaciones\n");
            scanf("%d", &decision);

            if (decision >= 1 && decision <= 6) {
                system("cls");
                switch (decision) {
                    case 1:
                        printf("Ingrese el nuevo Nombre y Apellido: \n");
                        scanf(" %[^\n]", LSO[pos].nombreyapellido);
                        break;
                    case 2:
                        printf("Ingrese los nuevos servicios: \n");
                        scanf(" %[^\n]", LSO[pos].servicios);
                        break;
                    case 3:
                        printf("Ingrese el nuevo domicilio: \n");
                        scanf(" %[^\n]", LSO[pos].domicilio);
                        break;
                    case 4:
                        printf("Ingrese el nuevo correo: \n");
                        scanf(" %[^\n]", LSO[pos].correo);
                        break;
                    case 5:
                        printf("Ingrese el nuevo telefono: \n");
                        scanf(" %[^\n]", LSO[pos].telefono);
                        break;
                    case 6:
                        seguir = 0;
                        break;
                }
            } else {
                printf("Error! Ingrese una opción valida\n.");
                system("pause");
            }

            if (seguir) {
                printf("¿Desea modificar otro campo? (1: Si, 0: No)\n");
                scanf("%d", &seguir);
            }

        } while (seguir == 1);

        *exito = 1;
        return 1;
    }
}


void Evocar(Prestador LSO[], Prestador *Elem, int DNI, int *exito){
int pos, exitoLocalizar=0;

Prestador ElemBusqueda;
ElemBusqueda.DNI = DNI;
Localizar(LSO, ElemBusqueda, &exitoLocalizar, &pos);

if(exitoLocalizar){
    *Elem = LSO[pos]; //Copiamos la informacion del prestador encontrado
    *exito = 1;//Evocacion exitosa
}else{
    *exito=0;
}
}

void MostrarEstructura(Prestador LSO[]) {
    system("cls");
    int i;

    if (CantElem == 0) {
        printf("La lista de prestadores esta vacia.\n");
        return ;
    }
    for (i = 0; i < CantElem; i++) {
        printf("--------- Listado de Prestadores ---------\n");
        printf("Prestador %d:\n", i + 1);
        printf("DNI: %d\n", LSO[i].DNI);
        printf("Nombre y Apellido: %s\n", LSO[i].nombreyapellido);
        printf("Servicios: %s\n", LSO[i].servicios);
        printf("Domicilio: %s\n", LSO[i].domicilio);
        printf("Correo: %s\n", LSO[i].correo);
        printf("Telefono: %s\n", LSO[i].telefono);
        printf("------------------------------------------\n");
    }
}

 int MemorizacionPrevia(Prestador LSO[]) {
   FILE *fp;
    Prestador aux;
    int exito = 1;

  fp = fopen("Prestadores.txt", "r");

    // Intentar abrir el archivo en modo lectura
    if (fp == NULL) {
        printf("No se pudo abrir el archivo.\n");
        return 0;
    } else {
        // Leer los datos del archivo hasta llegar al final
        while (!feof(fp) && CantElem <= MAXPRESTADORES) {
            fscanf(fp, "%d", &aux.DNI);
            fscanf(fp, " %[^\n]", aux.nombreyapellido);
            fscanf(fp, " %[^\n]", aux.servicios);
            fscanf(fp, " %[^\n]", aux.domicilio);
            fscanf(fp, " %[^\n]", aux.correo);
            fscanf(fp, " %[^\n]", aux.telefono);

            int duplicado = 0;
            int i;
            for(i=0; i<CantElem; i++){
                if(strcmp(LSO[i].nombreyapellido, aux.nombreyapellido)== 0){
                    duplicado = 1;
                    printf("Advertencia se encontro un prestador duplicado con el nombre '%s'. No se dara de Alta. \n", aux.nombreyapellido);
                }

            }
            if(!duplicado){
                Alta(LSO, aux, &exito);
            }
            if(CantElem > MAXPRESTADORES){
                printf("Se alcanzo el maximo de prestadores %d. No se cargaran mas prestadores. \n", MAXPRESTADORES);
                break;
            }

            }



            if (!exito) {
                printf("No se pudo cargar el prestador con DNI %d.\n", aux.DNI);
                return 0;
            }
        }

                   fclose(fp);  // Cerrar el archivo después de leer todos los datos
                   return 1;


                  }







int main()
{
    int opcion;
    int exito;
    Prestador nuevoPrestador;
    Prestador prestadorEvocado;
    int DNI;

    Prestador LSO[MAXPRESTADORES+1]; //+1 para el elemento del infinito
    inicializarLSO(LSO);

    do{
       system("cls");
       printf("Bienvenidos a la agenda de prestadores de servicios.\n");
       printf("----- MENU PRINCIPAL -----\n");
       printf("1. Ingreso de nuevos prestadores\n");
       printf("2. Eliminar prestadores existentes\n");
       printf("3. Modificar datos de un prestador\n");
       printf("4. Consultar la informacion completa asociada al prestador\n");
       printf("5. Cargar prestadores desde un archivo\n");
       printf("6. Mostrar todos los prestadores\n");
       printf("7. Salir\n");
       printf("---------------------------\n");
       printf("Ingrese una opcion: ");
       scanf(" %d", &opcion);

    switch(opcion){
     case 1:
     system("cls");
        while(1) { // Loop infinito que se rompe sólo si el DNI es válido
            printf("Ingrese el DNI del nuevo prestador (hasta 8 digitos): \n");
            scanf(" %d", &nuevoPrestador.DNI);

            // Controla que el DNI no sea igual a INFINITO y que no supere los 8 dígitos
            if(nuevoPrestador.DNI == INFINITO) {
                printf("DNI no permitido, elija otro.\n");
            } else if (nuevoPrestador.DNI > 99999999 || nuevoPrestador.DNI < 10000000) { // Asume que un DNI válido está entre 10000000 y 99999999
                printf("DNI invalido, debe ser un numero de 8 digitos.\n");
            } else {
                break; // Si el DNI es válido, sale del bucle
            }
        }

        printf("Ingrese el nombre y apellido: \n");
        scanf(" %[^\n]", nuevoPrestador.nombreyapellido);
        printf("Ingrese los servicios del prestador: \n");
        scanf(" %[^\n]", nuevoPrestador.servicios);
        printf("Ingrese el domicilio: \n");
        scanf(" %[^\n]", nuevoPrestador.domicilio);
        printf("Ingrese el correo: \n");
        scanf(" %[^\n]", nuevoPrestador.correo);
        printf("Ingrese el telefono: \n");
        scanf(" %[^\n]", nuevoPrestador.telefono);

        Alta(LSO, nuevoPrestador, &exito);

        if(exito) {
            printf("Prestador dado de alta con exito.\n");
        } else {
            printf("Error: no se pudo dar de alta al prestador.\n");
        }
        system("pause");
        break;


     case 2:
        system("cls");
        printf("Ingrese el DNI del prestador a dar de baja: \n");
        scanf(" %d", &DNI);
        Baja(LSO, DNI, &exito);
        if(exito){
            printf("Prestador dado de baja con exito. \n");
        }else{
            printf("Error: No se encontro el prestador. \n");
        }
        system("pause");
        break;
     case 3:
        system("cls");
        printf("Ingrese el DNI del prestador a modificar: ");
        scanf(" %d", &DNI);
        Modificar(LSO, &nuevoPrestador, DNI, &exito);
        if(exito){
            printf("Prestador modificado con exito. \n");
        }else{
            printf("Error: No se encontro el prestador. \n");
        }
        system("pause");
        break;
     case 4:
        system("cls");
        printf("Ingrese el DNI del prestador a evocar: \n");
        scanf(" %d", &DNI);
        Evocar(LSO, &prestadorEvocado, DNI, &exito);
        if(exito){
            printf("Prestador encontrado:\n");
            printf("DNI: %d\n", prestadorEvocado.DNI);
            printf("Nombre y Apellido: %s\n", prestadorEvocado.nombreyapellido);
            printf("Servicios: %s\n", prestadorEvocado.servicios);
            printf("Domicilio: %s\n", prestadorEvocado.domicilio);
            printf("Correo: %s\n", prestadorEvocado.correo);
            printf("Teléfono: %s\n", prestadorEvocado.telefono);
        }else{
            printf("Error: Prestador no encontrado. \n");
        }
         system("pause");
         break;
     case 5:
         system("cls");
         MemorizacionPrevia(LSO);
         system("pause");
         break;
     case 6:
         system("cls");
         MostrarEstructura(LSO);
         system("pause");
         break;
     case 7:
          printf("Saliendo del programa. . . \n");
          break;
     default:
        printf("Opcion invalida intente nuevamente \n");
        system("pause");
        break;

       }
    }while(opcion != 7);


}




