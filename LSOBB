
#ifndef LSOBB_H_INCLUDED
#define LSOBB_H_INCLUDED



#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAXPRESTADORES 110


//variables de costos
int LSOBB_Altas=0, LSOBB_total_Alta, LSOBB_corr_Alta=0, LSOBB_max_Alta=0,
LSOBB_Bajas=0, LSOBB_total_Baja=0, LSOBB_corr_Baja=0, LSOBB_max_Baja=0,
LSOBB_local=0, LSOBB_total_local=0, LSOBB_cant_local=0, LSOBB_max_local=0,
LSOBB_evocacion_NE=0, LSOBB_max_evocacion_NE=0,  LSOBB_max_local_EE=0;
float LSOBB_medio_Alta=0, LSOBB_medio_Baja=0, LSOBB_medio_local=0;
//Explicacion de variables:
//LSOBB_Altas: total de altas exitosas en la lista
//LSOBB_total_Alta: son todos los corrimientos en la lista
//LSOBB_corr_Alta: son los corrimientos en cada ejecucion. Auxiliar para el máximo.
//LSOBB_max_Alta: cantidad de corrimientos más alto en el alta.
//LSOBB_medio_Alta: coste medio del alta.
int CantElem=0;
void LSOBB_Localizar(Prestador l[], int dni, int *exito, int *pos, int opcion) {
     int li,ls,m;
     li=0;
     ls=CantElem;
     m =(li+ls)/2;
     if (opcion==3){
         LSOBB_cant_local++;
     }

	 while ((li<ls)&&(l[m].DNI!=dni)){
      if (opcion==3){
         LSOBB_cant_local++;
     }
     if (l[m].DNI<dni) {
            li = m+1;
    }
		 else {
         ls = m;
		 }
      m =(li+ls)/2;
}
    if (ls==li) {
                *exito= 0; //localización no exitosa
                *pos=li;
            }
            else {
            *exito=1; //localizacion exitosa
            *pos=m;
            }
}

void LSOBB_Alta(Prestador l[], Prestador ElementoAlta, int *exito, int opcion) {
    int pos, exitoLocalizar = 0, i;

    LSOBB_Localizar(l, ElementoAlta.DNI, &exitoLocalizar, &pos, opcion);


    if (!exitoLocalizar) {
        if (CantElem < MAXPRESTADORES) {
            // Realizamos el corrimiento para insertar en la posición correcta
            for (i = CantElem; i > pos; i--) {
                l[i] = l[i - 1];
                LSOBB_corr_Alta++;
            }
            // Insertamos el elemento en la posición encontrada
            l[pos] = ElementoAlta;
            CantElem++;
            *exito = 1;  // Alta exitosa
            LSOBB_Altas++;

        } else {
            *exito = -1;  // Alta no exitosa, lista llena o DNI inválido

        }
    } else {
        *exito = 2;  // Alta no exitosa, DNI repetido

    }
    //Calculos de costos
     if (LSOBB_corr_Alta>LSOBB_max_Alta){
        LSOBB_max_Alta=LSOBB_corr_Alta;
    }
       LSOBB_total_Alta+=LSOBB_corr_Alta;
    LSOBB_corr_Alta=0;
}

void LSOBB_Baja(Prestador l[], int DNI, int *exito, Prestador e, int opcion){
int pos, exitoLocalizar=0, i;

LSOBB_Localizar(l, DNI,  &exitoLocalizar, &pos, opcion);

if(exitoLocalizar){

   if(confirma(l, pos, e)==1){
    for(i=pos; i<CantElem-1; i++){
        l[i] = l[i+1];
        LSOBB_corr_Baja++;
    }
    CantElem--;//Reducimos el numero de elementos

    *exito=1; //Se dio de baja correctamente
    LSOBB_Bajas++;

        } else {
            *exito = 0;

        }
    } else {
        *exito = 0; // No se encontró el prestador

    }
       //Calculos de costos
     if (LSOBB_corr_Baja>LSOBB_max_Baja){
        LSOBB_max_Baja=LSOBB_corr_Baja;
    }
     LSOBB_total_Baja+=LSOBB_corr_Baja;
    LSOBB_corr_Baja=0;
}


void LSOBB_MostrarEstructura(Prestador l[]) {
    system("cls");
    int i, c=0;

    if (CantElem == 0) {
        printf("La lista de prestadores está vacía.\n");
        return;
    }
    for (i = 0; i < CantElem; i++) {
        printf("--------- Listado de Prestadores ---------\n");
        printf("Prestador %d:\n", i + 1);
        printf("DNI: %d\n", l[i].DNI);
        printf("Nombre y Apellido: %s\n", l[i].nombreyapellido);
        printf("Servicios: %s\n", l[i].servicios);
        printf("Domicilio: %s\n", l[i].domicilio);
        printf("Correo: %s\n", l[i].correo);
        printf("Telefono: %s\n", l[i].telefono);
        printf("------------------------------------------\n");
        c++;
        if (c==5){
            getchar();
            c=0;
        }
    }
}

void LSOBB_Evocar(Prestador LSO[], Prestador *Elem, int DNI, int *exito, int opcion){
    int pos, exitoLocalizar;
    LSOBB_Localizar(LSO, DNI, &exitoLocalizar, &pos, opcion);

    if(exitoLocalizar&&DNI<INFINITO){
        *Elem = LSO[pos]; //Copiamos la informacion del prestador encontrado
        *exito = 1;//Evocacion exitosa
        LSOBB_local++;
         if (LSOBB_cant_local>LSOBB_max_local_EE){
            LSOBB_max_local_EE=LSOBB_cant_local;
        }
          LSOBB_total_local+=LSOBB_cant_local;
    }else{
        *exito=0;
        LSOBB_evocacion_NE++;
         if (LSOBB_cant_local>LSOBB_max_evocacion_NE){
            LSOBB_max_evocacion_NE=LSOBB_cant_local;
        }
          LSOBB_total_local+=LSOBB_cant_local;
    }



     LSOBB_cant_local=0;

}


#endif // LSOBB_H_INCLUDED
