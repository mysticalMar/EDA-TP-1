
#include <stdio.h>
#include <stdlib.h>
#include "ABB.h"
#include "lso.h"
#include "lsobb.h"

int lectura_operaciones(Prestador LSO[], Prestador LSOBB[], Arbol *arbol) {
    init_ABB(arbol);  // Inicializa el árbol
    inicializarLSO(LSO);  // Inicializa las listas secuenciales
    int opcion = 0, exitoLSO = 0, exitoLSOBB = 0, exito = 0;
    int DNI, prestadorescargadosLSO = 0, prestadorescargadosLSOBB = 0;
    Prestador aux;
    PrestadorABB a;  // Variable para almacenar datos en ABB
    FILE *fp = fopen("OperacionesPrestadores.txt", "r");

    if (fp == NULL) {
        printf("No se puede abrir el archivo\n");
        return 0;
    }
    else {
      while (!feof(fp)){
            fscanf(fp, "%d", &opcion);
            fscanf(fp, "%d", &aux.DNI);
            if (opcion==1||opcion==2){
                fscanf(fp, " %[^\n]", aux.nombreyapellido);
                fscanf(fp, " %[^\n]", aux.servicios);
                fscanf(fp, " %[^\n]", aux.domicilio);
                fscanf(fp, " %[^\n]", &aux.correo);
                fscanf(fp, " %[^\n]", &aux.telefono);
                if (opcion==1){
                  // Inserta en LSO
                LSO_Alta(LSO, aux, &exitoLSO);
                // Inserta en LSOBB
                LSOBB_Alta(LSOBB, aux, &exitoLSOBB);
                // Convierte los datos de Prestador a PrestadorABB antes de insertarlo en el ABB
                a.DNI = aux.DNI;
                strcpy(a.nombreyapellido, aux.nombreyapellido);
                strcpy(a.servicios, aux.servicios);
                strcpy(a.domicilio, aux.domicilio);
                strcpy(a.correo, aux.correo);
                strcpy(a.telefono, aux.telefono);

                // Inserta en el ABB
                Alta_ABB(arbol, a, &exito);
            }
                else{
                    DNI=aux.DNI;
                    LSO_Baja(LSO, DNI, &exitoLSO, aux);
                    LSOBB_Baja(LSOBB, DNI, &exitoLSOBB, aux);
                    Baja_ABB(arbol, a);
                }
            } else if (opcion==3){
                LSO_Evocar(LSO, &aux, DNI, &exitoLSO);
                LSOBB_Evocar(LSOBB, &aux, DNI, &exitoLSOBB);
                Evocar_ABB(arbol, DNI, &exito, &a);
            }
            opcion=0;

        }
        fclose(fp);
        return 1;
    }

}

int main()
{
        int opcion;
        Prestador LSO[111], LSOBB[110] ,nuevop;
        Arbol arbol;
     // Variables para acumular los costos del ABB
       int cantActPterosAlta = 0, maxAlta = 0, cantAlta = 0;
       int cantActPterosBaja = 0, maxBaja = 0, cantBaja = 0;
       int comparacionesEvocar = 0, cantEvocaciones = 0, maxComparaciones = 0;

     // Variables para almacenar los costos totales y medios en ABB
       float costo_total_alta_ABB = 0, costo_total_baja_ABB = 0, costo_total_evocar_ABB = 0;
       float costo_medio_alta_ABB = 0, costo_medio_baja_ABB = 0, costo_medio_evocar_ABB = 0;

        do{
              printf("--------------------BIENVENIDO-------------------\n");
                printf("------------------ MENU PRINCIPAL----------------\n");
                printf("1: Comparar estructuras \n");
                printf("2: Mostrar: ABB \n");
                printf("3: Mostrar: LSO \n");
                printf("4: Mostrar: LSOBB \n");
                printf("5: Salir \n");
                printf("-------------------------------------------------\n");
                scanf("%d", &opcion);
            switch(opcion){
            case 1: lectura_operaciones(LSO, LSOBB, &arbol);
                //costes LSO
                printf("___________________________________________________ \n");
                printf("LSO\n");
                 if (LSO_Altas>0){
                LSO_medio_Alta=LSO_total_Alta/LSO_Altas;
                 printf("Coste medio de Alta en LSO: %f \n", LSO_medio_Alta);
                }
                printf("Coste maximo de Alta en LSO: %d \n", LSO_max_Alta);

                if (LSO_Bajas>0){
                    LSO_medio_Baja=LSO_total_Baja/LSO_Bajas;
                    printf("Coste medio de Baja en LSO: %f \n", LSO_medio_Baja);
                }
                    printf("Coste maximo de Baja en LSO: %f \n", LSO_max_Baja);

                if (LSO_local>0){
                    LSO_medio_local=LSO_total_Local/LSO_local;
                    printf("Coste medio de evocacion en LSO: %f \n", LSO_medio_local);
                }
                    printf("Coste maximo de evocacion en LSO: %f \n", LSO_max_local);

                //costes LSOBB
                printf("___________________________________________________ \n");
                printf("LSOBB\n");
                 if (LSOBB_Altas>0){
                LSOBB_medio_Alta=LSOBB_total_Alta/LSOBB_Altas;
                 printf("Coste medio de Alta en LSOBB: %f \n", LSOBB_medio_Alta);
                }

                printf("Coste maximo de Alta en LSOBB: %d \n", LSOBB_max_Alta);
                if (LSOBB_Bajas>0){
                    LSOBB_medio_Baja=LSOBB_total_Baja/LSOBB_Bajas;
                    printf("Coste medio de Baja en LSOBB: %f \n", LSOBB_medio_Baja);
                }
                    printf("Coste maximo de Baja en LSOBB: %f \n", LSOBB_max_Baja);

                if (LSOBB_local>0){
                    LSOBB_medio_local=LSOBB_total_local/LSOBB_local;
                    printf("Coste medio de evocacion en LSOBB: %f \n", LSOBB_medio_local);
                }
                    printf("Coste maximo de evocacion en LSOBB: %f \n", LSOBB_max_local);
                    printf("___________________________________________________\n");
                printf("ABB\n");
                  // costes ABB

                   costo_total_alta_ABB = cantActPtrosAlta * 0.5;
                    if (cantAltas > 0) {
                        costo_medio_alta_ABB = costo_total_alta_ABB / cantAltas;
                        printf("Costo medio de Alta en ABB: %f\n", costo_medio_alta_ABB);
                        printf("Costo maximo de Alta en ABB: %d\n", MaxAlta);
                    }


                    // Costo total y medio de bajas en ABB
                    costo_total_baja_ABB = cantActPtrosBaja * 0.5;
                    if (cantBajas > 0) {
                        costo_medio_baja_ABB = costo_total_baja_ABB / cantBajas;
                        printf("Costo medio de Baja en ABB: %f\n", costo_medio_baja_ABB);

                    }
                     printf("Costo maximo de Baja en ABB: %d\n", MaxBaja);

                    // Costo total y medio de evocación en ABB
                    if (cantEvocaciones > 0) {
                        costo_medio_evocar_ABB = (comparacionesEvocar * 1.0) / cantEvocaciones;
                        printf("Costo medio de Evocacion en ABB: %f\n", costo_medio_evocar_ABB);

                    }
                     printf("Maximo de comparaciones en una Evocacion en ABB: %d\n", MaxComparaciones);
                   printf("___________________________________________________\n");
            break;
            case 2: MostrarEstructura_ABB(&arbol);
            break;

            case 3: MostrarEstructura(LSO);
            break;
            case 4: MostrarEstructura(LSOBB);
            break;
             case 5:
                 system("cls");
               printf("Saliendo...\n");
            break;
            default:
                printf("Error seleccione una opcion valida\n");
                break;
            }

        }

        while(opcion<=4);

        }
