#ifndef LSO_H_INCLUDED
#define LSO_H_INCLUDED

typedef struct {
    int DNI;
    char nombreyapellido[80];
    char servicios[120];
    char domicilio[80];
    char correo[50];
    char telefono[30];
} Prestador;


int CantElem = 0;

void inicializarLSO(Prestador l[]) {
l[0].DNI=INFINITO;
CantElem = 0;
}

void Localizar(Prestador l[], int dni, int *exito, int *pos) {
    int i = 0;
    while  (l[i].DNI < dni) {
        i++;
    }
    *pos = i;

    if (l[i].DNI == dni) {
        *exito = 1; // Se encontr� el DNI
    } else {
        *exito = 0; // No se encontr� el DNI
    }
}

void Alta(Prestador l[], Prestador ElementoAlta, int *exito) {
    int pos, exitoLocalizar = 0, i;

    Localizar(l, ElementoAlta.DNI, &exitoLocalizar, &pos);


    if (!exitoLocalizar) {
        if (CantElem < MAXPRESTADORES && ElementoAlta.DNI < INFINITO) {
            // Realizamos el corrimiento para insertar en la posici�n correcta
            for (i = CantElem+1; i > pos; i--) {
                l[i] = l[i - 1];
            }
            // Insertamos el elemento en la posici�n encontrada
            l[pos] = ElementoAlta;
            CantElem++;
            *exito = 1;  // Alta exitosa

        } else {
            *exito = -1;  // Alta no exitosa, lista llena o DNI inv�lido

        }
    } else {
        *exito = 2;  // Alta no exitosa, DNI repetido

    }
}

void Baja(Prestador l[], int DNI, int *exito){
int pos, exitoLocalizar=0, i;

Localizar(l, DNI,  &exitoLocalizar, &pos);

if(exitoLocalizar){

   if(confirma(l, pos)==1){
    for(i=pos; i < CantElem; i++){
        l[i] = l[i+1];
    }
    CantElem--;//Reducimos el numero de elementos

    *exito=1; //Se dio de baja correctamente

        } else {
            *exito = 0;

        }
    } else {
        *exito = 0; // No se encontr� el prestador

    }
}
int confirma(Prestador l[], int pos){
    int confirmacion=0;
 printf("�Esta seguro que quiere dar de baja al presetador con DNI %d?\n", l[pos].DNI);
   printf("Nombre y Apellido: %s \n",l[pos].nombreyapellido);
   printf("Domicilio: %s\n", l[pos].domicilio);
   printf("Correo: %s\n", l[pos].correo);
   printf("Servicios: %s\n", l[pos].servicios);
   printf("Telefono: %s\n", l[pos].telefono);
   printf("Ingrese un 1 para confirmar, o cualquier otro numero para cancelar: ");
   scanf("%d", &confirmacion);
   return confirmacion;
}
int Modificar(Prestador LSO[], Prestador *Elem, int DNI, int *exito){
      int pos, exitoLocalizar = 0;

    Prestador ElemBusqueda;
    ElemBusqueda.DNI = DNI;
    Localizar(LSO, DNI, &exitoLocalizar, &pos);

    if (!exitoLocalizar) {
        *exito = 0;
        return 0;
    } else {
        int decision;
        int seguir = 1;
        do {
            system("cls");
            printf("Este es el prestador encontrado:\n");
            printf("DNI: %d\n", LSO[pos].DNI);
            printf("Nombre y Apellido: %s\n", LSO[pos].nombreyapellido);
            printf("Servicios: %s\n", LSO[pos].servicios);
            printf("Domicilio: %s\n", LSO[pos].domicilio);
            printf("Correo: %s\n", LSO[pos].correo);
            printf("Telefono: %s\n", LSO[pos].telefono);

            printf("\nIndique que campo desea modificar:\n");
            printf("<1> Nombre y Apellido\n<2> Servicios\n<3> Domicilio\n");
            printf("<4> Correo\n<5> Telefono\n<6> Salir de modificaciones\n");
            scanf("%d", &decision);

            if (decision >= 1 && decision <= 6) {
                system("cls");
                switch (decision) {
                    case 1:
                        printf("Ingrese el nuevo Nombre y Apellido: \n");
                        scanf(" %[^\n]", LSO[pos].nombreyapellido);
                        break;
                    case 2:
                        printf("Ingrese los nuevos servicios: \n");
                        scanf(" %[^\n]", LSO[pos].servicios);
                        break;
                    case 3:
                        printf("Ingrese el nuevo domicilio: \n");
                        scanf(" %[^\n]", LSO[pos].domicilio);
                        break;
                    case 4:
                        printf("Ingrese el nuevo correo: \n");
                        scanf(" %[^\n]", LSO[pos].correo);
                        break;
                    case 5:
                        printf("Ingrese el nuevo telefono: \n");
                        scanf(" %[^\n]", LSO[pos].telefono);
                        break;
                    case 6:
                        seguir = 0;
                        break;
                }
            } else {
                printf("Error! Ingrese una opcion valida\n.");
                system("pause");
            }

            if (seguir) {
                printf("�Desea modificar otro campo? (1: Si, 0: No)\n");
                scanf("%d", &seguir);
            }

        } while (seguir == 1);

        *exito = 1;
        return 1;
    }
}


void MostrarEstructura(Prestador l[]) {
    system("cls");
    int i, c=0;

    if (CantElem == 0) {
        printf("La lista de prestadores est� vac�a.\n");
        return;
    }
    for (i = 0; i < CantElem; i++) {
        printf("--------- Listado de Prestadores ---------\n");
        printf("Prestador %d:\n", i + 1);
        printf("DNI: %d\n", l[i].DNI);
        printf("Nombre y Apellido: %s\n", l[i].nombreyapellido);
        printf("Servicios: %s\n", l[i].servicios);
        printf("Domicilio: %s\n", l[i].domicilio);
        printf("Correo: %s\n", l[i].correo);
        printf("Telefono: %s\n", l[i].telefono);
        printf("------------------------------------------\n");
        c++;
        if (c==5){
            getchar();
            c=0;
        }
    }
}

int MemorizacionPrevia(Prestador LSO[]){
   FILE *fp;
    Prestador aux;
    int exito = 0, duplicados = 0, prestadorescargados = 0, i;
    int dniduplicado;

    // Intentar abrir el archivo "Prestadores.txt" para lectura
    if ((fp = fopen("Prestadores.txt", "r")) == NULL) {
        printf("No se pudo abrir el archivo 'Prestadores.txt'.\n");
        return 0;
    }else{

    // Leer el archivo l�nea por l�nea hasta el final o hasta que se llenen los prestadores
    while (prestadorescargados < MAXPRESTADORES && fscanf(fp, "%d\n%[^\n]\n%[^\n]\n%[^\n]\n%[^\n]\n%[^\n]\n",
                                                          &aux.DNI, aux.nombreyapellido, aux.servicios,
                                                          aux.domicilio, aux.correo, aux.telefono) != EOF) {

        // Verificar si el DNI es v�lido
        if (aux.DNI <= 0 || aux.DNI == INFINITO || aux.DNI > INFINITO) {
            printf("DNI inv�lido encontrado: %d. Se omitira este registro.\n", aux.DNI);
            continue;
        }



            Alta(LSO, aux, &exito);

            if (exito == 1) {
                prestadorescargados++;
            }
            else {
                dniduplicado = 0;
                for (i = 0; i < CantElem; i++) {
                    if (exito==2) {
                        dniduplicado = 1;
                        duplicados++;
                        printf("DNI duplicado encontrado: %d. Se omitira este registro.\n", aux.DNI);
                        break;

                    }
                }
            }
    }

    }

    // Cerrar el archivo
    fclose(fp);

    // Mostrar un resumen de la carga
    printf("\nResumen de la carga:\n");
    printf("Cantidad de prestadores cargados: %d\n", prestadorescargados);
    if (duplicados > 0) {
        printf("Se omitieron %d prestadores debido a DNIs duplicados.\n", duplicados);
    }

    return 1;
}

void Evocar(Prestador LSO[], Prestador *Elem, int DNI, int *exito){
    int pos, exitoLocalizar=0;
    Localizar(LSO, DNI, &exitoLocalizar, &pos);

    if(exitoLocalizar){
        *Elem = LSO[pos]; //Copiamos la informacion del prestador encontrado
        *exito = 1;//Evocacion exitosa
    }else{
        *exito=0;
    }
}

#endif // LSO_H_INCLUDED

