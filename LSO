#ifndef LSO_H_INCLUDED
#define LSO_H_INCLUDED
#include <string.h>
#define INFINITO 99999999
#define MAXPRESTADORES 110
//Grupo 32 Maximo Gallardo y Mariana Romano

typedef struct {
    int DNI;
    char nombreyapellido[80];
    char servicios[120];
    char domicilio[80];
    char correo[50];
    char telefono[30];
} Prestador;


int CantElemLSO = 0;
//variables de costos
int LSO_evocacion_NE=0, LSO_max_evocacion_NE=0, LSO_Altas=0, LSO_total_Alta=0, LSO_corr_Alta=0, LSO_max_Alta=0, LSO_Bajas=0, LSO_total_Baja=0, LSO_corr_Baja=0, LSO_max_Baja=0, LSO_total_Local=0, LSO_cant_local=0, LSO_max_local=0, LSO_local=0;
float LSO_medio_Alta=0, LSO_medio_Baja=0, LSO_medio_local=0;

void inicializarLSO(Prestador l[]) {
l[0].DNI=INFINITO;
CantElemLSO = 0;
}
void LSO_Localizar(Prestador l[], int dni, int *exito, int *pos) {
    int i = 0;
    while  (l[i].DNI < dni) {
        i++;
    }
    LSO_cant_local=i+1;
    *pos = i;

    if (l[i].DNI == dni) {
        *exito = 1; // Se encontr� el DNI

    } else {
        *exito = 0; // No se encontr� el DNI
    }

}

void LSO_Alta(Prestador l[], Prestador ElementoAlta, int *exito) {
    int pos, exitoLocalizar = 0, i;
    LSO_Localizar(l, ElementoAlta.DNI, &exitoLocalizar, &pos);


    if (!exitoLocalizar) {
        if (CantElemLSO < MAXPRESTADORES && ElementoAlta.DNI < INFINITO) {
            // Realizamos el corrimiento para insertar en la posici�n correcta
            for (i = CantElemLSO+1; i > pos; i--) {
                l[i] = l[i - 1];
                LSO_corr_Alta++;
            }
            // Insertamos el elemento en la posici�n encontrada
            l[pos] = ElementoAlta;
            CantElemLSO++;
            *exito = 1;  // Alta exitosa
            LSO_Altas++;
        } else {
            *exito = -1;  // Alta no exitosa, lista llena o DNI inv�lido

        }
    } else {
        *exito = 2;  // Alta no exitosa, DNI repetido

    }
    //costos
    if(LSO_corr_Alta>LSO_max_Alta){
        LSO_max_Alta=LSO_corr_Alta;
    }
    LSO_total_Alta+=LSO_corr_Alta;
    LSO_corr_Alta=0;
}

void LSO_Baja(Prestador l[], int DNI, int *exito, Prestador e){ //e se recibe por parámetro para comparar el elemento obtenido en la posición que coincida con el dni (confirmación automática)
int pos, exitoLocalizar=0, i;

LSO_Localizar(l, DNI,  &exitoLocalizar, &pos);
if(exitoLocalizar){

   if(confirma(l, pos, e)==1&&DNI<INFINITO){
    for(i=pos; i < CantElemLSO; i++){
        l[i] = l[i+1];
       LSO_corr_Baja++;
    }
    CantElemLSO--;//Reducimos el numero de elementos

    *exito=1; //Se dio de baja correctamente
     LSO_Bajas++;
        } else {
            *exito = 0;
        }
    } else {
        *exito = 0; // No se encontr� el prestador

    }
    //Costos
    if(LSO_corr_Baja>LSO_max_Baja){
        LSO_max_Baja=LSO_corr_Baja;
    }
    LSO_total_Baja+=LSO_corr_Baja;
     LSO_corr_Baja=0;
}
int confirma(Prestador l[], int pos, Prestador elemento){
    int c;
   if (strcasecmp(l[pos].nombreyapellido, elemento.nombreyapellido) == 0 &&
    strcasecmp(l[pos].servicios, elemento.servicios) == 0 &&
    strcasecmp(l[pos].domicilio, elemento.domicilio) == 0 &&
    strcasecmp(l[pos].correo, elemento.correo) == 0 &&
    strcasecmp(l[pos].telefono, elemento.telefono) == 0) {
    c = 1;
} else {
    c = 0;
}
return c;
}


void MostrarEstructura(Prestador l[]) {
    system("cls");
    int i, c=0;

    if (CantElemLSO == 0) {
        printf("La lista de prestadores est� vac�a.\n");
        return;
    }
    for (i = 0; i < CantElemLSO; i++) {
        printf("--------- Listado de Prestadores ---------\n");
        printf("Prestador %d:\n", i + 1);
        printf("DNI: %d\n", l[i].DNI);
        printf("Nombre y Apellido: %s\n", l[i].nombreyapellido);
        printf("Servicios: %s\n", l[i].servicios);
        printf("Domicilio: %s\n", l[i].domicilio);
        printf("Correo: %s\n", l[i].correo);
        printf("Telefono: %s\n", l[i].telefono);
        printf("------------------------------------------\n");
        c++;
        if (c==5){
            getchar();
            c=0;
        }
    }
}


void LSO_Evocar(Prestador LSO[], Prestador *Elem, int DNI, int *exito){
    int pos, exitoLocalizar;
    printf("dni: %d \n", DNI);
    LSO_Localizar(LSO, DNI, &exitoLocalizar, &pos);

    if(exitoLocalizar&&DNI<INFINITO){
        *Elem = LSO[pos]; //Copiamos la informacion del prestador encontrado
        *exito = 1;//Evocacion exitosa
        LSO_local++;
         if (LSO_cant_local>LSO_max_local){
            LSO_max_local=LSO_cant_local;
        }
          LSO_total_Local+=LSO_cant_local;
    }else{
        *exito=0;
        LSO_evocacion_NE++;
         if (LSO_cant_local>LSO_max_evocacion_NE){
            LSO_max_evocacion_NE=LSO_cant_local;
        }
          LSO_total_Local+=LSO_cant_local;
    }


     LSO_cant_local=0;

}


#endif // LSO_H_INCLUDED
