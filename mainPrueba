#include <stdio.h>
#include <stdlib.h>
#include "LSO.h"
#include "LSOBB.h"
#include "ABB.h"

void precargaLSO(Prestador LSO[]) {
    inicializarLSO(LSO);
    int opcion = 0, exito = 0, DNI, prestadorescargados = 0;
    Prestador aux;
    FILE *fp = fopen("OperacionesPrestadores.txt", "r");

    if (fp == NULL) {
        printf("No se puede abrir el archivo \n");
        exit(1);
    }

    while (fscanf(fp, "%d", &opcion) != EOF) {

        switch (opcion) {
        case 1:
            if (prestadorescargados == MAXPRESTADORES) {
                break;
            }

            fscanf(fp, "%d\n%[^\n]\n%[^\n]\n%[^\n]\n%[^\n]\n%[^\n]\n",
                                   &aux.DNI, aux.nombreyapellido, aux.servicios,
                                   aux.domicilio, aux.correo, aux.telefono);

                LSO_Alta(LSO, aux, &exito);

                if (exito == 1) {
                    prestadorescargados++;
                }
            break;

        case 2:
                fscanf(fp, "%d\n", &DNI);
            LSO_Baja(LSO, DNI, &exito, aux);
             if (exito == 1) {
                    prestadorescargados--;
             }
            break;


        case 3:
            fscanf(fp, "%d\n", &DNI);
            LSO_Evocar(LSO, &aux, DNI, &exito);
            break;

        default:
            printf("Opción inválida: %d\n", opcion);
            break;
        }


        if (prestadorescargados == MAXPRESTADORES) {

            break; // Salir del bucle principal si alcanzamos el máximo de prestadores
        }
    }

    fclose(fp);
}
int precargaLSOBB(PrestadorLSOBB LSOBB[]) {
    int opcion = 0, exito = 0, DNI, prestadorescargados = 0;
    PrestadorLSOBB aux;
    FILE *fp = fopen("OperacionesPrestadores.txt", "r");
    if (fp == NULL) {
        printf("No se puede abrir el archivo \n");
        return 0;
    }

    while (!feof(fp)) {
        fscanf(fp, "%d", &opcion);
        switch (opcion) {
            case 1:
                if (prestadorescargados > MAXPRESTADORES) {
                    break;
                }

                fscanf(fp, "%d\n%[^\n]\n%[^\n]\n%[^\n]\n%[^\n]\n%[^\n]\n",
                       &aux.DNI, aux.nombreyapellido, aux.servicios,
                       aux.domicilio, aux.correo, aux.telefono);

                LSOBB_Alta(LSOBB, aux, &exito);

                if (exito == 1) {
                    prestadorescargados++;
                    printf("Prestadores cargados (LSOBB): %d \n", prestadorescargados);
                }
                break;

            case 2:
                fscanf(fp, "%d \n", &DNI);
                LSOBB_Baja(LSOBB, DNI, &exito);

                break;

            case 3:
                fscanf(fp, "%d \n", &DNI);
                LSOBB_Evocar(LSOBB, &aux, DNI, &exito);
                break;
        }
    }

    fclose(fp);
}
int precargaABB(Arbol *arbol) {
    init_ABB(arbol);
    int opcion = 0, exito = 0, DNI, prestadorescargados = 0;
    int cantActPterosAlta = 0, maxAlta = 0, cantAlta = 0;
    int cantActPterosBaja = 0, maxBaja = 0, cantBaja = 0;
    int comparaciones;
    PrestadorABB aux;
    FILE *fp = fopen("OperacionesPrestadores.txt", "r");
    if (fp == NULL) {
        printf("No se puede abrir el archivo \n");
        return 0;
    }

    while (!feof(fp)) {
        fscanf(fp, "%d", &opcion);
        switch (opcion) {
            case 1:
                fscanf(fp, "%d\n%[^\n]\n%[^\n]\n%[^\n]\n%[^\n]\n%[^\n]\n",
                       &aux.DNI, aux.nombreyapellido, aux.servicios,
                       aux.domicilio, aux.correo, aux.telefono);

               Alta_ABB(arbol, aux, &exito, &cantActPterosAlta, &maxAlta, &cantAlta);

                if (exito == 1) {
                    prestadorescargados++;
                    printf("Prestadores cargados (ABB): %d \n", prestadorescargados);
                }
                break;

            case 2:
               fscanf(fp, "%d \n", &DNI);
               Baja_ABB(arbol, DNI, &cantActPterosBaja, &maxBaja, &cantBaja);
                break;

            case 3:
                fscanf(fp, "%d \n", &DNI);
                Evocar_ABB(arbol, DNI, &exito, &aux);
                break;
        }
    }

    fclose(fp);
}
int main() {
    int opcion;
    Prestador LSO[111];
    PrestadorLSOBB LSOBB[110];
    Arbol arbol;
    float LSO_medio_Alta = 0, LSOBB_medio_Alta = 0;
    float LSO_medio_Baja = 0, LSOBB_medio_Baja = 0;
    int LSO_max_Alta = 0, LSOBB_max_Alta = 0;
    int LSO_max_Baja = 0, LSOBB_max_Baja = 0;
    int LSO_Altas = 0, LSOBB_Altas = 0;
    int LSO_Bajas = 0, LSOBB_Bajas = 0;
    int LSO_total_Alta = 0, LSOBB_total_Alta = 0;

    // Variables para acumular los costos del ABB
int cantActPterosAlta = 0, maxAlta = 0, cantAlta = 0;
int cantActPterosBaja = 0, maxBaja = 0, cantBaja = 0;
int comparacionesEvocar = 0, cantEvocaciones = 0, maxComparaciones = 0;

// Variables para almacenar los costos totales y medios en ABB
float costo_total_alta_ABB = 0, costo_total_baja_ABB = 0, costo_total_evocar_ABB = 0;
float costo_medio_alta_ABB = 0, costo_medio_baja_ABB = 0, costo_medio_evocar_ABB = 0;


    do {
        printf("1: Comparar estructuras \n");
        printf("2: Mostrar: ABB \n");
        printf("3: Mostrar: LSO \n");
        printf("4: Mostrar: LSOBB \n");
        scanf("%d", &opcion);

        switch (opcion) {
            case 1:
                // Precargar todas las estructuras
                precargaLSO(LSO);
                precargaLSOBB(LSOBB);
                precargaABB(&arbol);
                // Cálculos de costes medios y máximos

               costo_total_alta_ABB = cantActPterosAlta * 0.5;

               costo_total_baja_ABB = cantActPterosBaja * 0.5;

                 // Costo medio de las altas
                 if (cantAlta > 0) {
            costo_medio_alta_ABB = costo_total_alta_ABB / cantAlta;
            printf("Costo medio de Alta en ABB: %f \n", costo_medio_alta_ABB);
            printf("Costo máximo de Alta en ABB: %d \n", maxAlta);
            }

               // Costo medio de las bajas
             if (cantBaja > 0) {
           costo_medio_baja_ABB = costo_total_baja_ABB / cantBaja;
           printf("Costo medio de Baja en ABB: %f \n", costo_medio_baja_ABB);
           printf("Costo máximo de Baja en ABB: %d \n", maxBaja);
            }


    int exito;
      if(exito){
         costo_total_evocar_ABB += comparacionesEvocar * 1;
         cantEvocaciones++;
         }
        if (comparacionesEvocar > maxComparaciones) {
        maxComparaciones = comparacionesEvocar;  // Actualiza si fue la mayor cantidad de comparaciones
    }

     // Costo medio de evocaciones
     if (cantEvocaciones > 0) {
    costo_medio_evocar_ABB = costo_total_evocar_ABB / cantEvocaciones;
    printf("Costo medio de Evocar en ABB: %f \n", costo_medio_evocar_ABB);
    printf("Máximo de comparaciones en una Evocación en ABB: %d \n", maxComparaciones);
              }


                if (LSO_Altas > 0) {
                    LSO_medio_Alta = LSO_total_Alta / LSO_Altas;
                    printf("Coste medio de Alta en LSO: %f \n", LSO_medio_Alta);
                    printf("Coste máximo de Alta en LSO: %d \n", LSO_max_Alta);
                }

                if (LSOBB_Altas > 0) {
                    LSOBB_medio_Alta = LSOBB_total_Alta / LSOBB_Altas;
                    printf("Coste medio de Alta en LSOBB: %f \n", LSOBB_medio_Alta);
                    printf("Coste máximo de Alta en LSOBB: %d \n", LSOBB_max_Alta);
                }


                break;

            case 2:
                MostrarEstructura_ABB(&arbol);
                break;

            case 3:
                LSO_MostrarEstructura(LSO);
                break;

            case 4:
                MostrarEstructura_LSOBB(LSOBB);
                break;
            case 5:
                printf("Saliendo...\n");
                break;

            default:
                printf("Opción no válida\n");
                break;
        }

    } while (opcion != 5);

    return 0;
}
