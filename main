#include <stdio.h>
#include <stdlib.h>
#include "ABB.h"
#include "lso.h"
#include "lsobb.h"

void precarga(Prestador LSO[], Prestador LSOBB[], Arbol *arbol) {
    init_ABB(arbol);  // Inicializa el árbol
    inicializarLSO(LSO);  // Inicializa las listas secuenciales
    int opcion = 0, exitoLSO = 0, exitoLSOBB = 0, exito = 0;
    int DNI, prestadorescargadosLSO = 0, prestadorescargadosLSOBB = 0;
    Prestador aux;
    PrestadorABB a;  // Variable para almacenar datos en ABB
    FILE *fp = fopen("OperacionesPrestadores.txt", "r");

    if (fp == NULL) {
        printf("No se puede abrir el archivo\n");
        exit(1);
    }

    while (fscanf(fp, "%d", &opcion) != EOF) {
        switch (opcion) {
            case 1: // Alta
                if (prestadorescargadosLSO == MAXPRESTADORES) {
                    break;
                }
                // Lee los datos del prestador
                fscanf(fp, "%d\n%[^\n]\n%[^\n]\n%[^\n]\n%[^\n]\n%[^\n]\n", &aux.DNI, aux.nombreyapellido, aux.servicios,
                        aux.domicilio, aux.correo, aux.telefono);

                // Inserta en LSO
                LSO_Alta(LSO, aux, &exitoLSO);
                // Inserta en LSOBB
                LSOBB_Alta(LSOBB, aux, &exitoLSOBB);

                // Convierte los datos de Prestador a PrestadorABB antes de insertarlo en el ABB
                a.DNI = aux.DNI;
                strcpy(a.nombreyapellido, aux.nombreyapellido);
                strcpy(a.servicios, aux.servicios);
                strcpy(a.domicilio, aux.domicilio);
                strcpy(a.correo, aux.correo);
                strcpy(a.telefono, aux.telefono);

                // Inserta en el ABB
                Alta_ABB(arbol, a, &exito);

                if (exitoLSO == 1) prestadorescargadosLSO++;
                if (exitoLSOBB == 1) prestadorescargadosLSOBB++;
            break;

            case 2: // Baja
                fscanf(fp, "%d\n", &DNI);
                LSO_Baja(LSO, DNI, &exitoLSO, aux);
                LSOBB_Baja(LSOBB, DNI, &exitoLSOBB, aux);
                Baja_ABB(arbol, DNI);
                if (exitoLSO == 1) prestadorescargadosLSO--;
                if (exitoLSOBB == 1) prestadorescargadosLSOBB--;
            break;

            case 3: // Evocar
                fscanf(fp, "%d\n", &DNI);
                LSO_Evocar(LSO, &aux, DNI, &exitoLSO);
                LSOBB_Evocar(LSOBB, &aux, DNI, &exitoLSOBB);
                Evocar_ABB(arbol, DNI, &exito, &a);
            break;
        }

        if (prestadorescargadosLSO == MAXPRESTADORES) {
            break;  // Salir del bucle si se alcanzan los prestadores
        }
    }

    fclose(fp);
}

int main()
{
        int opcion;
        Prestador LSO[111], LSOBB[110] ,nuevop;
        Arbol arbol;
     // Variables para acumular los costos del ABB
       int cantActPterosAlta = 0, maxAlta = 0, cantAlta = 0;
       int cantActPterosBaja = 0, maxBaja = 0, cantBaja = 0;
       int comparacionesEvocar = 0, cantEvocaciones = 0, maxComparaciones = 0;

     // Variables para almacenar los costos totales y medios en ABB
       float costo_total_alta_ABB = 0, costo_total_baja_ABB = 0, costo_total_evocar_ABB = 0;
       float costo_medio_alta_ABB = 0, costo_medio_baja_ABB = 0, costo_medio_evocar_ABB = 0;

        do{
                printf("1: Comparar estructuras \n");
                printf("2: Mostrar: ABB \n");
                printf("3: Mostrar: LSO \n");
                printf("4: Mostrar: LSOBB \n");
                scanf("%d", &opcion);

            switch(opcion){
            case 1: precarga(LSO, LSOBB, &arbol);
            //costes LSO
             if (LSO_Altas>0){
            LSO_medio_Alta=LSO_total_Alta/LSO_Altas;
             printf("Coste medio de Alta en LSO: %f \n", LSO_medio_Alta);
            }
            printf("Coste maximo de Alta en LSO: %d \n", LSO_max_Alta);

            if (LSO_Bajas>0){
                LSO_medio_Baja=LSO_total_Baja/LSO_Bajas;
                printf("Coste medio de Baja en LSO: %f \n", LSO_medio_Baja);
            }
                printf("Coste maximo de Baja en LSO: %f \n", LSO_max_Baja);

            if (LSO_local>0){
                LSO_medio_local=LSO_total_Local/LSO_local;
                printf("Coste medio de evocacion en LSO: %f \n", LSO_medio_local);
            }
                printf("Coste maximo de evocacion en LSO: %f \n", LSO_max_local);

            //costes LSOBB
             if (LSOBB_Altas>0){
            LSOBB_medio_Alta=LSOBB_total_Alta/LSOBB_Altas;
             printf("Coste medio de Alta en LSOBB: %f \n", LSOBB_medio_Alta);
            }

            printf("Coste maximo de Alta en LSOBB: %d \n", LSOBB_max_Alta);
            if (LSOBB_Bajas>0){
                LSOBB_medio_Baja=LSOBB_total_Baja/LSOBB_Bajas;
                printf("Coste medio de Baja en LSOBB: %f \n", LSOBB_medio_Baja);
            }
                printf("Coste maximo de Baja en LSOBB: %f \n", LSOBB_max_Baja);

            if (LSOBB_local>0){
                LSOBB_medio_local=LSOBB_total_local/LSOBB_local;
                printf("Coste medio de evocacion en LSOBB: %f \n", LSOBB_medio_local);
            }
                printf("Coste maximo de evocacion en LSOBB: %f \n", LSOBB_max_local);
              // costes ABB

               costo_total_alta_ABB = cantActPtrosAlta * 0.5;
                if (cantAltas > 0) {
                    costo_medio_alta_ABB = costo_total_alta_ABB / cantAltas;
                    printf("Costo medio de Alta en ABB: %f\n", costo_medio_alta_ABB);
                    printf("Costo maximo de Alta en ABB: %d\n", MaxAlta);
                }

                // Costo total y medio de bajas en ABB
                costo_total_baja_ABB = cantActPtrosBaja * 0.5;
                if (cantBajas > 0) {
                    costo_medio_baja_ABB = costo_total_baja_ABB / cantBajas;
                    printf("Costo medio de Baja en ABB: %f\n", costo_medio_baja_ABB);

                }
                 printf("Costo maximo de Baja en ABB: %d\n", MaxBaja);

                // Costo total y medio de evocación en ABB
                if (cantEvocaciones > 0) {
                    costo_medio_evocar_ABB = (comparacionesEvocar * 1.0) / cantEvocaciones;
                    printf("Costo medio de Evocacion en ABB: %f\n", costo_medio_evocar_ABB);

                }
                 printf("Maximo de comparaciones en una Evocacion en ABB: %d\n", MaxComparaciones);
            break;
            case 2: MostrarEstructura_ABB(&arbol);
            break;

            case 3: MostrarEstructura(LSO);
            break;
            case 4: MostrarEstructura(LSOBB);
            break;
            }

        }

        while(opcion<=4);

        }


